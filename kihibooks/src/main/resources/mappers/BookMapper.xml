<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.kh.kihibooks.dao.BookDAO">
    <resultMap id="bookWithKeywords" type="BookVO">
        <!-- BookVO 기본 필드 매핑 -->
        <id property="bo_code" column="bo_code" />
        <result property="bo_title" column="bo_title" />
        <result property="bo_author" column="bo_author" />
        <result property="bo_total_episode" column="bo_total_episode" />
        <result property="bo_total_rating" column="bo_total_rating" />
        <result property="bo_review_count" column="bo_review_count" />
        <result property="bo_description" column="bo_description" />
        <result property="bo_adult" column="bo_adult" />

        <!-- KeywordVO 리스트 매핑 -->
        <collection property="keywordList" ofType="KeywordVO">
            <result property="kw_code" column="kw_code"/>
            <result property="kw_name" column="kw_name"/>
        </collection>
    </resultMap>
    <resultMap id="bookSimpleMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_publish_date" column="BO_PUBLISH_DATE" />
    </resultMap>
    <resultMap id="bookNewMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_author" column="AU_NAME" />
    </resultMap>
    <resultMap id="bookFilteredMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_author" column="AU_NAME" />
        <result property="bo_total_episode" column="BO_TOTAL_EPISODE" />
        <result property="bo_adult" column="BO_ADULT" />
        <result property="bo_fin" column="BO_FIN" />
        <result property="bo_publish_date" column="BO_PUBLISH_DATE" />
    </resultMap>
    <resultMap id="bookBestMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_fin" column="BO_FIN" />
        <result property="bo_adult" column="BO_ADULT" />
        <result property="bo_publish_date" column="BO_PUBLISH_DATE" />
        <result property="bo_total_episode" column="BO_TOTAL_EPISODE" />
        <result property="au_name" column="AU_NAME"/>
        <collection property="keywordList" ofType="KeywordVO"
                column="BO_CODE"
                select="selectKeywordListByBookCode" />
    </resultMap>




    <select id="selectBookList" resultType="BookVO">
        select book.* from book
        join recent_view on bo_code = rc_bo_code
        where rc_ur_num = #{ur_num}
    </select>
    <select id="selectTopBooks" resultMap="bookSimpleMap">
        SELECT
            BO_CODE, BO_TITLE, BO_TOTAL_RATING, BO_REVIEW_COUNT, BO_PUBLISH_DATE
        FROM
            book
        ORDER BY
            BO_TOTAL_RATING DESC, BO_REVIEW_COUNT DESC
        LIMIT 18;
    </select>
    <select id="selectWaitFreeBooks" resultMap="bookSimpleMap">
        SELECT
            BO_CODE, BO_TITLE, BO_TOTAL_RATING, BO_REVIEW_COUNT, BO_WAIT_FOR_FREE
        FROM
            book
        WHERE
            BO_WAIT_FOR_FREE = 'Y'
        ORDER BY BO_PUBLISH_DATE DESC
        LIMIT 20
    </select>
    <select id="selectNewBooks" resultMap="bookNewMap">
        SELECT
            BO_CODE, BO_TITLE, BO_TOTAL_RATING, BO_REVIEW_COUNT, AU_NAME
        FROM
            book
        JOIN
            author ON book.BO_AU_NUM = author.AU_NUM
        WHERE
            BO_PUBLISH_DATE >= DATE_SUB(NOW(), INTERVAL 6 MONTH)
        ORDER BY BO_PUBLISH_DATE DESC
    </select>

    <select id="selectFilteredBooks" resultMap="bookFilteredMap">
        SELECT
            BO_CODE, BO_TITLE, BO_TOTAL_RATING, BO_REVIEW_COUNT, AU_NAME AS bo_author,
            BO_TOTAL_EPISODE, BO_ADULT, BO_FIN, BO_PUBLISH_DATE
        FROM
            book
        JOIN
            author ON book.BO_AU_NUM = author.AU_NUM
        WHERE
            BO_PUBLISH_DATE >= DATE_SUB(NOW(), INTERVAL 6 MONTH)
        
        <if test="adultYN != null and adultYN != ''">
                AND BO_ADULT = #{adultYN}
        </if>
        
        <choose>
            <when test="order == 'popular'">
                ORDER BY BO_TOTAL_RATING DESC, BO_REVIEW_COUNT DESC
            </when>
            <otherwise>
                ORDER BY BO_PUBLISH_DATE DESC
            </otherwise>
        </choose>

        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countFilteredBooks" resultType="int">
        SELECT
            COUNT(*)
        FROM
            book
        WHERE
            BO_PUBLISH_DATE >= DATE_SUB(NOW(), INTERVAL 6 MONTH)

        <if test="adultYN != null and adultYN !=''">
            AND BO_ADULT = #{adultYN}
        </if>
    </select>
    <select id="selectBestBooks" resultMap="bookBestMap">
        SELECT
            BO_CODE, BO_TITLE, BO_TOTAL_RATING, COUNT(DISTINCT RV_NUM) AS BO_REVIEW_COUNT,
            BO_FIN, BO_ADULT, BO_PUBLISH_DATE,
            BO_TOTAL_EPISODE,
            AU_NAME AS bo_author,
            IFNULL(r_recent.recent_review_count, 0) AS recent_review_count
        FROM
            book
        JOIN
            author ON BO_AU_NUM = AU_NUM
        LEFT JOIN
            review ON RV_BO_CODE = BO_CODE
        <!-- 최근 리뷰 수만 정렬용으로 별도 서브쿼리에서 가져오기 -->
        LEFT JOIN(
            SELECT
                RV_BO_CODE, COUNT(*) AS recent_review_count
            FROM
                review
            <choose>
                <when test="range == 'day'">
                    WHERE DATE(RV_DATE) = CURDATE()
                </when>
                <when test="range == 'week'">
                    WHERE RV_DATE >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
                </when>
                <when test="range == 'day'">
                    WHERE RV_DATE >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
                </when>
                <otherwise>
                    WHERE 1=1
                </otherwise>
            </choose>
            GROUP BY RV_BO_CODE
        )r_recent ON r_recent.RV_BO_CODE = BO_CODE
        <!-- 날짜 필터: 오늘 / 주간 / 월간 -->
        <where>
            <!-- 성인 필터 -->
            <if test="adultYN != null and adultYN != ''">
                AND BO_ADULT = #{adultYN}
            </if>
            <!-- 완결 필터 -->
            <if test="finished != null and finished != ''">
                AND BO_FIN = #{finished}
            </if>
        </where>
        GROUP BY BO_CODE
        ORDER BY recent_review_count DESC, BO_TOTAL_RATING DESC
        LIMIT #{size} OFFSET #{offset}
    </select>
    <select id="selectKeywordListByBookCode" resultType="KeywordVO">
        SELECT 
            kw_code, kw_name
        FROM 
            book_keyword
        JOIN 
            keyword k 
        ON bk_kw_code = kw_code
        WHERE bk_bo_code = #{bo_code}
    </select>
    <select id="countBestBooks" resultType="int">
        SELECT
            COUNT(DISTINCT BO_CODE)
        FROM
            book
        LEFT JOIN
            review ON RV_BO_CODE = BO_CODE
        <choose>
            <when test="range == 'day'">
            AND DATE(RV_DATE) = CURDATE()
            </when>
            <when test="range == 'week'">
            AND RV_DATE >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
            </when>
            <when test="range == 'month'">
            AND RV_DATE >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
            </when>
        </choose>

        WHERE
            1=1
        <if test="adultYN != null and adultYN != ''">
            AND BO_ADULT = #{adultYN}
        </if>

        <if test="finished != null and finished != ''">
            AND BO_FIN = #{finished}
        </if>
    </select>

    <!-- 키워드 검색 도서 리스트 -->
    <select id="selectBooksByKeywords" resultMap="bookWithKeywords">
        SELECT
            BO_CODE, BO_TITLE, BO_DESCRIPTION, BO_TOTAL_EPISODE,
            BO_TOTAL_RATING, BO_REVIEW_COUNT, BO_ADULT, BO_FIN, BO_PUBLISH_DATE,
            AU_NAME AS bo_author,
            KW_CODE AS KW_CODE, KW_NAME AS kw_name
        FROM
            book
        JOIN
            author ON BO_AU_NUM = AU_NUM
        LEFT JOIN
            book_keyword ON BK_BO_CODE = BO_CODE
        LEFT JOIN
            keyword ON KW_CODE = BK_KW_CODE
        <if test="keywordIds != null and keywordIds.size() > 0">
            JOIN (
                SELECT DISTINCT BK_BO_CODE
                FROM book_keyword
                WHERE BK_KW_CODE IN
                <foreach item="id" collection="keywordIds" open="(" close=")" separator=",">
                    #{id}
                </foreach>
                GROUP BY BK_BO_CODE
                HAVING COUNT(DISTINCT BK_KW_CODE) = #{keywordCount}
            ) filtered ON BO_CODE = filtered.BK_BO_CODE
        </if>
        <choose>
            <when test="sort == 'popular'">
                ORDER BY BO_REVIEW_COUNT DESC
            </when>
            <when test="sort == 'rating'">
                ORDER BY BO_TOTAL_RATING DESC
            </when>
            <when test="sort == 'review'">
                ORDER BY BO_REVIEW_COUNT DESC
            </when>
            <otherwise>
                ORDER BY BO_PUBLISH_DATE DESC
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>
    <!-- 키워드 검색 도서 개수 -->
    <select id="countBooksByKeywords" resultType="int">
        SELECT COUNT(*)
        FROM (
            SELECT BO_CODE
            FROM book
            <if test="keywordIds != null and keywordIds.size() > 0">
                JOIN (
                    SELECT BK_BO_CODE
                    FROM book_keyword
                    WHERE BK_KW_CODE IN
                    <foreach item="id" collection="keywordIds" open="(" close=")" separator=",">
                        #{id}
                    </foreach>
                    GROUP BY BK_BO_CODE
                    HAVING COUNT(DISTINCT BK_KW_CODE) = #{keywordCount}
                ) filtered ON BO_CODE = filtered.BK_BO_CODE
            </if>
        ) AS result
    </select>

    <select id="selectBook" resultType="BookVO">
        select *, author.au_name AS bo_author, publisher.pu_name AS bo_publisher, sub_cate.sc_name AS bo_sub_cate, main_cate.mc_name AS bo_main_cate from book
        join `author` on bo_au_num = au_num
        join `publisher_id` on bo_pi_num = pi_num
        join `publisher` on pi_pu_code = pu_code
        join `sub_cate` on bo_sc_code = sc_code
        join `main_cate` on sc_mc_code = mc_code
        where bo_code = #{bo_code}
    </select>
    
    <update id="updateRating">
        update book
        set bo_total_rating = (select sum(rv_rating) from review where rv_bo_code = #{bo_code} and rv_ori_num is null),
            bo_review_count = (select count(*) from review where rv_bo_code = #{bo_code} and rv_ori_num is null)
        where bo_code = #{bo_code}
    </update>

    <select id="selectEpisodeList" resultType="EpisodeVO">
        select * from episode where ep_bo_code = #{bo_code}
    </select>

    <select id="selectReviewList" resultType="ReviewVO">
        select *, user.ur_nickname AS rv_user from review
        join user on rv_ur_num = ur_num
        where rv_bo_code = #{bo_code}
        order by rv_num desc
    </select>
    <select id="selectSubCategory" resultType="SubCategoryVO">
        select * from sub_cate where SC_MC_CODE = #{sc_mc_code}
    </select>

    <insert id="insertReview">
        insert into review(rv_ur_num, rv_rating, rv_content, rv_spoiler, rv_bo_code, rv_num, rv_ori_num)
        (select #{rv_ur_num}, #{rv_rating}, #{rv_content}, #{rv_spoiler}, #{rv_bo_code}, ifnull(max(rv_num),0)+1,
        <choose>
            <when test="rv_ori_num == 0">
                ifnull(max(rv_num),0) +1
            </when>
            <otherwise>
                #{rv_ori_num}
            </otherwise>
        </choose>
        from review)
    </insert>
    <insert id="insertReReview">
        insert into review(rv_ur_num, rv_content, rv_bo_code, rv_num, rv_ori_num)
        select #{rv_ur_num}, #{rv_content}, #{rv_bo_code}, ifnull(max(rv_num),0)+1, #{rv_ori_num} from review
    </insert>
    <insert id="insertAuthor">
        insert into author(au_name) values(#{au_name})
    </insert>
    <select id="getAuthorNum" resultType="int">
        select au_num from author where au_name = #{au_name}
    </select>
    <select id="getLatestBoNum" resultType="String">
        SELECT LPAD(COUNT(*)+1,3,0) FROM BOOK
        JOIN publisher_id ON BO_PI_NUM = PI_NUM
        WHERE CONCAT(PI_PU_CODE, BO_SC_CODE)=#{psCode}
    </select>
    <insert id="insertBook">
        insert into book(
            bo_code, bo_title, bo_description,
            bo_free_episode, bo_serial_schedule,bo_wait_for_free,
            bo_wff_date, bo_publish_date, bo_adult,
            bo_sc_code, bo_pi_num, bo_au_num)
        values(
            #{bo_code}, #{bo_title}, #{bo_description},
            #{bo_free_episode}, #{bo_serial_schedule}, #{bo_wait_for_free},
            #{bo_wff_date}, #{bo_publish_date}, #{bo_adult},
            #{bo_sc_code}, #{bo_pi_num}, #{bo_au_num})
    </insert>
    <select id="getBookCode" resultType="BookVO">
        select * from book where bo_au_num = #{bo_au_num} and bo_title = #{bo_title} and bo_pi_num = #{bo_pi_num}
    </select>
    <insert id="insertBookKeyword">
        insert into book_keyword(bk_bo_code, bk_kw_code) values(#{bk_bo_code}, #{bk_kw_code})
    </insert>

    <select id="findReviewBySort" resultType="ReviewVO">
        SELECT r.*,
            COALESCE((
                SELECT COUNT(*) FROM review_like l
                WHERE l.rl_rv_num = r.rv_num AND l.rl_state = 1
            ), 0) AS rv_li_count
        FROM review r
        WHERE r.rv_bo_code = #{bo_code} AND r.rv_del = 'N'

        <choose>
            <when test="sort == 'like'">
                ORDER BY rv_li_count DESC
            </when>
            <when test="sort == 'high'">
                ORDER BY r.rv_rating DESC
            </when>
            <when test="sort == 'low'">
                ORDER BY r.rv_rating ASC
            </when>
            <otherwise>
                ORDER BY r.rv_date DESC
            </otherwise>
        </choose>
    </select>
    <select id="selectEditorsBookList" resultType="BookVO">
        select book.*, author.au_name as bo_author, publisher.pu_name as bo_publisher from book
        join author on bo_au_num = au_num
        join publisher_id on bo_pi_num = pi_num
        join publisher on pi_pu_code = pu_code
        where bo_pi_num = #{pi_num}
    </select>
    
    <select id="selectReply" resultType="ReviewVO">
        select *, user.ur_nickname AS rv_user from review
        join user on rv_ur_num = ur_num
        where rv_ur_num = #{rv_ur_num} and rv_content = #{rv_content}
        order by rv_date desc
        limit 1
    </select>
</mapper>