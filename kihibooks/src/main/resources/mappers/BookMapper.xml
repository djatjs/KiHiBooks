<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.kh.kihibooks.dao.BookDAO">
    <resultMap id="bookWithKeywords" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_author" column="BO_AUTHOR" />
        <result property="bo_total_episode" column="BO_TOTAL_EPISODE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_description" column="BO_DESCRIPTION" />
        <result property="bo_adult" column="BO_ADULT" />
        <result property="bo_fin" column="BO_FIN" />
        <result property="bo_publish_date" column="BO_PUBLISH_DATE" />

        <collection property="keywordList" ofType="KeywordVO">
            <result property="kw_code" column="KW_CODE"/>
            <result property="kw_name" column="KW_NAME"/>
        </collection>
    </resultMap>
    <resultMap id="bookSimpleMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_publish_date" column="BO_PUBLISH_DATE" />
    </resultMap>
    <resultMap id="bookNewMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_author" column="AU_NAME" />
        <result property="ep_cover_img" column="EP_COVER_IMG" />
    </resultMap>
    <resultMap id="bookFilteredMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_author" column="AU_NAME" />
        <result property="bo_total_episode" column="BO_TOTAL_EPISODE" />
        <result property="bo_adult" column="BO_ADULT" />
        <result property="bo_fin" column="BO_FIN" />
        <result property="bo_publish_date" column="BO_PUBLISH_DATE" />
        <result property="ep_cover_img" column="EP_COVER_IMG" />
    </resultMap>
    <resultMap id="bookBestMap" type="BookVO">
        <id property="bo_code" column="BO_CODE" />
        <result property="bo_title" column="BO_TITLE" />
        <result property="bo_total_rating" column="BO_TOTAL_RATING" />
        <result property="bo_review_count" column="BO_REVIEW_COUNT" />
        <result property="bo_fin" column="BO_FIN" />
        <result property="bo_adult" column="BO_ADULT" />
        <result property="bo_publish_date" column="BO_PUBLISH_DATE" />
        <result property="bo_total_episode" column="BO_TOTAL_EPISODE" />
        <result property="au_name" column="AU_NAME"/>
        <result property="ep_cover_img" column="EP_COVER_IMG" />
        <collection property="keywordList" ofType="KeywordVO"
                column="BO_CODE"
                select="selectKeywordListByBookCode" />
    </resultMap>

    <!-- 헤더 검색창에서 제목 또는 작가명으로 검색된 도서 리스트 -->
    <select id="searchBooksByTitle" resultType="BookVO">
        SELECT b.*, a.AU_NAME AS bo_author
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        WHERE (
            b.BO_TITLE LIKE CONCAT('%', #{query}, '%')
            OR a.AU_NAME LIKE CONCAT('%', #{query}, '%')
        )
        AND b.BO_TOTAL_EPISODE > 0
        ORDER BY b.BO_PUBLISH_DATE DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>
    <select id="countBooksByTitle" resultType="int">
        SELECT COUNT(*)
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        WHERE (
            b.BO_TITLE LIKE CONCAT('%', #{query}, '%')
            OR a.AU_NAME LIKE CONCAT('%', #{query}, '%')   
        )
        AND b.BO_TOTAL_EPISODE > 0
    </select>
    
    <!-- ===== 1. 장르 메인 요약 리스트 ===== -->
    <select id="selectNewBooks" resultType="BookVO">
        SELECT
            b.BO_CODE,
            b.BO_TITLE,
            a.AU_NAME,
            b.BO_TOTAL_RATING,
            b.BO_REVIEW_COUNT,
            ep.EP_COVER_IMG AS BO_THUMBNAIL
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        LEFT JOIN (
            SELECT EP_BO_CODE, MAX(EP_CODE) AS LATEST_EP_CODE
            FROM episode GROUP BY EP_BO_CODE
        ) latest_ep ON b.BO_CODE = latest_ep.EP_BO_CODE
        LEFT JOIN episode ep
            ON ep.EP_CODE = latest_ep.LATEST_EP_CODE
        WHERE b.BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
            AND b.BO_TOTAL_EPISODE > 0
        ORDER BY b.BO_PUBLISH_DATE DESC
        LIMIT 10
    </select>
    <select id="selectBestBooks" resultType="BookVO">
        SELECT b.*, a.AU_NAME AS bo_author, ep.EP_COVER_IMG
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        LEFT JOIN (
            SELECT ep1.*
            FROM episode ep1
            JOIN (
            SELECT EP_BO_CODE, MAX(EP_CODE) AS max_code
            FROM episode
            GROUP BY EP_BO_CODE
            ) latest ON ep1.EP_BO_CODE = latest.EP_BO_CODE AND ep1.EP_CODE = latest.max_code
        ) ep ON b.BO_CODE = ep.EP_BO_CODE
        WHERE b.BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
            AND b.BO_TOTAL_EPISODE > 0
        ORDER BY b.BO_REVIEW_COUNT DESC, b.BO_TOTAL_RATING DESC
        LIMIT 10
    </select>
    <select id="selectWaitFreeBooks" resultType="BookVO">
        SELECT b.*, a.AU_NAME AS bo_author, ep.EP_COVER_IMG
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        LEFT JOIN (
            SELECT ep1.*
            FROM episode ep1
            JOIN (
            SELECT EP_BO_CODE, MAX(EP_CODE) AS max_code
            FROM episode
            GROUP BY EP_BO_CODE
            ) latest ON ep1.EP_BO_CODE = latest.EP_BO_CODE AND ep1.EP_CODE = latest.max_code
        ) ep ON b.BO_CODE = ep.EP_BO_CODE
        WHERE b.BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
            AND b.BO_WAIT_FOR_FREE = 'Y'
            AND b.BO_TOTAL_EPISODE > 0
        ORDER BY b.BO_PUBLISH_DATE DESC
        LIMIT 10
    </select>
    <select id="selectRealtimeRankingBooks" resultType="BookVO">
        SELECT
            b.BO_CODE,
            b.BO_TITLE,
            a.AU_NAME AS bo_author,
            b.BO_TOTAL_RATING,
            b.BO_REVIEW_COUNT,
            ep.EP_COVER_IMG
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        LEFT JOIN (
            SELECT ep1.*
            FROM episode ep1
            JOIN (
                SELECT EP_BO_CODE, MAX(EP_CODE) AS max_code
                FROM episode
                GROUP BY EP_BO_CODE
            ) latest ON ep1.EP_BO_CODE = latest.EP_BO_CODE AND ep1.EP_CODE = latest.max_code
        ) ep ON b.BO_CODE = ep.EP_BO_CODE
        WHERE b.BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
            AND b.BO_TOTAL_EPISODE > 0
        ORDER BY b.BO_TOTAL_RATING DESC, b.BO_REVIEW_COUNT DESC
        LIMIT 10
    </select>


    <!-- ===== 2. 신작 탭 리스트 ===== -->
    <select id="selectNewBooksByGenre" resultMap="bookFilteredMap">
        SELECT *, a.AU_NAME AS bo_author, ep.EP_COVER_IMG AS bo_thumbnail
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        LEFT JOIN (
            SELECT EP_BO_CODE, EP_COVER_IMG
            FROM episode e1
            WHERE EP_CODE = (
                SELECT MAX(EP_CODE) 
                FROM episode e2 
                WHERE e1.EP_BO_CODE = e2.EP_BO_CODE
            )
        ) ep ON b.BO_CODE = ep.EP_BO_CODE
        WHERE b.BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
        AND b.BO_TOTAL_EPISODE > 0
        <if test="adultYN != null and adultYN != ''">
            AND b.BO_ADULT = #{adultYN}
        </if>
        <if test="finished != null and finished == ('' + 'Y')">
            AND b.BO_FIN = #{finished}
        </if>
        ORDER BY
        <choose>
            <when test="sort != null and 'popular'.equals(sort)"> 
                b.BO_REVIEW_COUNT DESC
            </when>
            <otherwise> 
                b.BO_PUBLISH_DATE DESC
            </otherwise>
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="countNewBooksByGenre"  resultType="int">
        SELECT COUNT(*)
        FROM book b
        WHERE BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
        AND b.BO_TOTAL_EPISODE > 0
        <if test="adultYN != null">
            AND BO_ADULT = #{adultYN}
        </if>
        <if test="finished != null and finished == ('' + 'Y')">
            AND BO_FIN = #{finished}
        </if>
    </select>

    <!-- ===== 3. 베스트 탭 리스트 ===== -->
    <select id="selectBestBooksByGenre" resultMap="bookFilteredMap">
        SELECT b.*, a.AU_NAME AS bo_author, ANY_VALUE(ep.EP_COVER_IMG) AS bo_thumbnail
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        JOIN review r ON b.BO_CODE = r.RV_BO_CODE
        LEFT JOIN (
            SELECT EP_BO_CODE, EP_COVER_IMG
            FROM episode e1
            WHERE EP_CODE = (
                SELECT MAX(EP_CODE)
                FROM episode e2
                WHERE e1.EP_BO_CODE = e2.EP_BO_CODE
            )
        ) ep ON b.BO_CODE = ep.EP_BO_CODE
        WHERE b.BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
        AND b.BO_TOTAL_EPISODE > 0
        <if test="adultYN != null">
            AND b.BO_ADULT = #{adultYN}
        </if>
        <if test="finished != null and finished == ('' + 'Y')">
            AND b.BO_FIN = #{finished}
        </if>
        <choose>
            <when test="range == 'day'">
                AND r.RV_DATE >= NOW() - INTERVAL 10 DAY
            </when>
            <when test="range == 'week'">
                AND r.RV_DATE >= NOW() - INTERVAL 20 DAY
            </when>
            <when test="range == 'month'">
                AND r.RV_DATE >= NOW() - INTERVAL 40 DAY
            </when>
        </choose>
        GROUP BY b.BO_CODE
        ORDER BY COUNT(r.RV_NUM) DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="countBestBooksByGenre"  resultType="int">
        SELECT COUNT(DISTINCT b.BO_CODE)
        FROM book b
        JOIN review r ON b.BO_CODE = r.RV_BO_CODE
        WHERE BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
        AND b.BO_TOTAL_EPISODE > 0
        <if test="adultYN != null">
            AND BO_ADULT = #{adultYN}
        </if>
        <if test="finished != null and finished == ('' + 'Y')">
            AND BO_FIN = #{finished}
        </if>
        <choose>
            <when test="range == 'day'">
                AND r.RV_DATE >= NOW() - INTERVAL 10 DAY
            </when>
            <when test="range == 'week'">
                AND r.RV_DATE >= NOW() - INTERVAL 20 DAY
            </when>
            <when test="range == 'month'">
                AND r.RV_DATE >= NOW() - INTERVAL 40 DAY
            </when>
        </choose>
    </select>

    <!-- ===== 4. 기다무 탭 리스트 ===== -->
    <select id="selectWaitFreeBooksByGenre" resultMap="bookFilteredMap">
        SELECT b.*, a.AU_NAME AS bo_author, ep.EP_COVER_IMG as bo_thumbnail
        FROM book b
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        LEFT JOIN (
            SELECT EP_BO_CODE, EP_COVER_IMG
            FROM episode e1
            WHERE EP_CODE = (
                SELECT MAX(EP_CODE)
                FROM episode e2
                WHERE e1.EP_BO_CODE = e2.EP_BO_CODE
            )
        ) ep ON b.BO_CODE = ep.EP_BO_CODE
        WHERE b.BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
        AND b.BO_WAIT_FOR_FREE = 'Y'
        AND b.BO_TOTAL_EPISODE > 0
        <if test="keyword != null and keyword != ''">
            AND b.BO_TITLE LIKE CONCAT('%', #{keyword}, '%')
        </if>
        ORDER BY
        <choose>
            <when test="sort == 'popular'"> b.BO_REVIEW_COUNT DESC </when>
            <when test="sort == 'rating'"> b.BO_TOTAL_RATING DESC </when>
            <when test="sort == 'review'"> b.BO_REVIEW_COUNT DESC </when>
            <otherwise> b.BO_PUBLISH_DATE DESC </otherwise>
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="countWaitFreeBooksByGenre" resultType="int">
        SELECT COUNT(*)
        FROM book b
        WHERE BO_SC_CODE LIKE CONCAT(#{mcCode}, '%')
        AND b.BO_TOTAL_EPISODE > 0
        AND BO_WAIT_FOR_FREE = 'Y'
        <if test="keyword != null and keyword != ''">
            AND BO_TITLE LIKE CONCAT('%', #{keyword}, '%')
        </if>
    </select>


    <select id="selectBookList" resultType="BookVO">
        select book.* from book
        join recent_view on bo_code = rc_bo_code
        where rc_ur_num = #{ur_num}
        AND b.BO_TOTAL_EPISODE > 0
    </select>
    <select id="selectTopBooks" resultMap="bookSimpleMap">
        SELECT
            BO_CODE, BO_TITLE, BO_TOTAL_RATING, BO_REVIEW_COUNT, BO_PUBLISH_DATE
        FROM
            book
        WHERE b.BO_TOTAL_EPISODE > 0
        ORDER BY
            BO_TOTAL_RATING DESC, BO_REVIEW_COUNT DESC
        LIMIT 18;
    </select>
    <select id="selectKeywordListByBookCode" resultType="KeywordVO">
        SELECT 
            kw_code, kw_name
        FROM 
            book_keyword
        LEFT JOIN 
            keyword 
        ON 
            bk_kw_code = kw_code
        WHERE 
            bk_bo_code = #{bo_code}
            AND b.BO_TOTAL_EPISODE > 0
    </select>
    <!-- 키워드 검색 도서 리스트 -->
    <select id="selectBooksByKeywords" resultMap="bookWithKeywords">
        SELECT 
            b.BO_CODE, b.BO_TITLE, b.BO_DESCRIPTION, b.BO_TOTAL_EPISODE,
            b.BO_TOTAL_RATING, b.BO_REVIEW_COUNT, b.BO_ADULT, b.BO_FIN, b.BO_PUBLISH_DATE,
            a.AU_NAME AS bo_author,
            k.KW_CODE AS kw_code, k.KW_NAME AS kw_name
        FROM (
            SELECT b.BO_CODE
            FROM book b
            JOIN book_keyword bk ON b.BO_CODE = bk.BK_BO_CODE

            <if test="keywordIds != null and keywordIds.size() > 0">
                WHERE bk.BK_KW_CODE IN
                <foreach collection="keywordIds" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>

            GROUP BY b.BO_CODE

            <if test="keywordCount != null and keywordCount > 0">
                HAVING COUNT(DISTINCT bk.BK_KW_CODE) = #{keywordCount}
            </if>

            <choose>
                <when test="sort == 'popular'">ORDER BY MAX(b.BO_TOTAL_RATING / b.BO_REVIEW_COUNT) DESC</when>
                <when test="sort == 'rating'">ORDER BY MAX(b.BO_TOTAL_RATING / b.BO_REVIEW_COUNT) DESC</when>
                <when test="sort == 'review'">ORDER BY MAX(b.BO_REVIEW_COUNT) DESC</when>
                <otherwise>ORDER BY MAX(b.BO_PUBLISH_DATE) DESC</otherwise>
            </choose>

            LIMIT #{limit} OFFSET #{offset}
        ) base
        JOIN book b ON b.BO_CODE = base.BO_CODE
        JOIN author a ON b.BO_AU_NUM = a.AU_NUM
        LEFT JOIN book_keyword bk ON bk.BK_BO_CODE = b.BO_CODE
        LEFT JOIN keyword k ON k.KW_CODE = bk.BK_KW_CODE
    </select>

    <!-- 키워드 검색 도서 개수 -->
    <select id="countBooksByKeywords" resultType="int">
        SELECT COUNT(*)
        FROM (
            SELECT b.BO_CODE
            FROM book b
            JOIN book_keyword bk ON b.BO_CODE = bk.BK_BO_CODE

            <if test="keywordIds != null and keywordIds.size() > 0">
                WHERE bk.BK_KW_CODE IN
                <foreach item="id" collection="keywordIds" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>

            GROUP BY b.BO_CODE

            <if test="keywordCount != null">
                HAVING COUNT(DISTINCT bk.BK_KW_CODE) = #{keywordCount}
            </if>
        ) AS result
    </select>

    <select id="selectBook" resultType="BookVO">
        select *, author.au_name AS bo_author, publisher.pu_name AS bo_publisher, sub_cate.sc_name AS bo_sub_cate, main_cate.mc_name AS bo_main_cate, (select count(*) from `interest` where it_bo_code = #{bo_code}) AS bo_like_count from book
        join `author` on bo_au_num = au_num
        join `publisher_id` on bo_pi_num = pi_num
        join `publisher` on pi_pu_code = pu_code
        join `sub_cate` on bo_sc_code = sc_code
        join `main_cate` on sc_mc_code = mc_code
        where bo_code = #{bo_code}
    </select>
    
    <update id="updateRating">
        update book
        set bo_total_rating = (select sum(rv_rating) from review where rv_bo_code = #{bo_code} and rv_ori_num is null and rv_del = "N"),
            bo_review_count = (select count(*) from review where rv_bo_code = #{bo_code} and rv_ori_num is null and rv_del = "N")
        where bo_code = #{bo_code}
    </update>

    <select id="selectEpisodeList" resultType="EpisodeVO">
        select * from episode where ep_bo_code = #{bo_code}
    </select>

    <select id="selectReviewList" resultType="ReviewVO">
        select *, user.ur_nickname AS rv_user from review
        join user on rv_ur_num = ur_num
        where rv_bo_code = #{bo_code}
        order by rv_num desc
    </select>
    <select id="selectSubCategory" resultType="SubCategoryVO">
        select * from sub_cate where SC_MC_CODE = #{sc_mc_code}
    </select>

    <insert id="insertReview">
        insert into review(rv_ur_num, rv_rating, rv_content, rv_spoiler, rv_bo_code, rv_num)
        value(#{rv_ur_num}, #{rv_rating}, #{rv_content}, #{rv_spoiler}, #{rv_bo_code}, #{rv_num})
    </insert>
    <insert id="insertReReview">
        insert into review(rv_ur_num, rv_content, rv_bo_code, rv_num, rv_ori_num)
        select #{rv_ur_num}, #{rv_content}, #{rv_bo_code}, ifnull(max(rv_num),0)+1, #{rv_ori_num} from review
    </insert>
    <insert id="insertAuthor">
        insert into author(au_name) values(#{au_name})
    </insert>
    <select id="getAuthorNum" resultType="int">
        select au_num from author where au_name = #{au_name}
    </select>
    <select id="getLatestBoNum" resultType="String">
        SELECT LPAD(COUNT(*)+1,3,0) FROM BOOK
        JOIN publisher_id ON BO_PI_NUM = PI_NUM
        WHERE CONCAT(PI_PU_CODE, BO_SC_CODE)=#{psCode}
    </select>
    <insert id="insertBook">
        insert into book(
            bo_code, bo_title, bo_description,
            bo_free_episode, bo_serial_schedule,bo_wait_for_free,
            bo_wff_date, bo_publish_date, bo_adult,
            bo_sc_code, bo_pi_num, bo_au_num)
        values(
            #{bo_code}, #{bo_title}, #{bo_description},
            #{bo_free_episode}, #{bo_serial_schedule}, #{bo_wait_for_free},
            #{bo_wff_date}, #{bo_publish_date}, #{bo_adult},
            #{bo_sc_code}, #{bo_pi_num}, #{bo_au_num})
    </insert>
    <select id="getBookCode" resultType="BookVO">
        select * from book where bo_au_num = #{bo_au_num} and bo_title = #{bo_title} and bo_pi_num = #{bo_pi_num}
    </select>
    <insert id="insertBookKeyword">
        insert into book_keyword(bk_bo_code, bk_kw_code) values(#{bk_bo_code}, #{bk_kw_code})
    </insert>

    <select id="findReviewBySort" resultType="ReviewVO">
        SELECT r.*,
            COALESCE((
                SELECT COUNT(*) FROM review_like l
                WHERE l.rl_rv_num = r.rv_num AND l.rl_state = 1
            ), 0) AS rv_li_count
        FROM review r
        WHERE r.rv_bo_code = #{bo_code} AND r.rv_del = 'N'

        <choose>
            <when test="sort == 'like'">
                ORDER BY rv_li_count DESC
            </when>
            <when test="sort == 'high'">
                ORDER BY r.rv_rating DESC
            </when>
            <when test="sort == 'low'">
                ORDER BY r.rv_rating ASC
            </when>
            <otherwise>
                ORDER BY r.rv_date DESC
            </otherwise>
        </choose>
    </select>
    <select id="selectEditorsBookList" resultType="BookVO">
        select book.*, author.au_name as bo_author, publisher.pu_name as bo_publisher from book
        join author on bo_au_num = au_num
        join publisher_id on bo_pi_num = pi_num
        join publisher on pi_pu_code = pu_code
        where bo_pi_num = #{pi_num}
        order by bo_title asc
    </select>
    <update id="updateBookInfo">
        update book
        set
            bo_pi_num = #{bo_pi_num},
            bo_description = #{bo_description},
            bo_sc_code = #{bo_sc_code},
            bo_serial_schedule = #{bo_serial_schedule},
            bo_publish_date = #{bo_publish_date},
            bo_adult = #{bo_adult},
            bo_wait_for_free = #{bo_wait_for_free},
            bo_wff_date = #{bo_wff_date},
            bo_free_episode = #{bo_free_episode}
        where bo_code = #{bo_code}
    </update>
    
    <select id="selectReview" resultType="ReviewVO">
        select *, user.ur_nickname AS rv_user from review
        join user on rv_ur_num = ur_num
        where rv_ur_num = #{rv_ur_num} and rv_content = #{rv_content}
        order by rv_num desc
        limit 1
    </select>

    <select id="selectReply" resultType="ReviewVO">
        select *, user.ur_nickname AS rv_user from review
        join user on rv_ur_num = ur_num
        where rv_ur_num = #{rv_ur_num} and rv_content = #{rv_content}
        order by rv_num desc
        limit 1
    </select>

    <select id="getLatestEpNum" resultType="String">
        SELECT LPAD(COUNT(*)+1,3,0) FROM episode
        WHERE EP_BO_CODE=#{bo_code}
    </select>
    <insert id="insertEpisode">
        insert into episode (ep_code, ep_title, ep_price, ep_bo_code, ep_file_name, ep_cover_img, ep_total_page)
        values (#{ep_code}, #{ep_title}, #{ep_price}, #{ep_bo_code}, #{ep_file_name}, #{ep_cover_img}, #{ep_total_page})
    </insert>
    <update id="updateEpisode">
        update episode
        set
            ep_title = #{ep_title},
            <if test="ep_file_name != null">
                ep_file_name = #{ep_file_name},
            </if>
            <if test="ep_cover_img != null">
                ep_cover_img = #{ep_cover_img},
            </if>
            ep_price = #{ep_price},
            ep_total_page = #{ep_total_page}
        where ep_code = #{ep_code}
    </update>
    <select id="getEpisodeByCode" resultType="EpisodeVO">
        select * from episode where ep_code = #{ep_code}
    </select>
    <!-- <update id="deleteEpisode">
        update episode set ep_del = "Y" where ep_code = #{ep_code}
    </update> -->
    <select id="selectLikeCount" resultType="int">
        select count(*) from review_like
        where rl_rv_num = #{rv_num} and rl_state = 1
    </select>

    <select id="getLike" resultType="ReviewLikeVO">
        select * from review_like
        where rl_rv_num = #{rv_num} and rl_ur_num = #{ur_num}
    </select>

    <insert id="insertLike">
        insert into review_like(rl_rv_num, rl_ur_num, rl_state)
        value(#{rv_num}, #{ur_num}, 1)
    </insert>

    <update id="updateLikeState">
        update review_like
        set rl_state = #{ur_state}
        where rl_rv_num = #{rv_num} and rl_ur_num = #{ur_num}
    </update>

    <select id="selectLikedReview" resultType="int">
        select rl_rv_num from review_like
        where rl_ur_num = #{ur_num} and rl_state = 1
    </select>

    <update id="deleteReview">
        update review
        set rv_rating = null, rv_content = "삭제된 댓글입니다.", rv_del = "Y"
        where rv_num = #{rv_num}
    </update>

    <select id="countReview" resultType="int">
        select count(*) from review
        where rv_bo_code = #{bo_code} and rv_ur_num = #{ur_num} and rv_del = "N" and rv_ori_num is null
    </select>

    <select id="getAuthorNumByBocode" resultType="int">
        select bo_au_num from book
        where bo_code = #{bo_code}
    </select>
    <select id="getAuthorAnotherBookList" resultType="BookVO">
        select *, author.au_name AS bo_author from book
        join author on au_num = bo_au_num
        join episode on EP_BO_CODE = BO_CODE
        where bo_au_num = #{au_num}
        order by substring((bo_total_rating / bo_review_count / 2.0), 1, 3) desc, bo_review_count desc
    </select>

    <select id="getAuthorsAnotherBookList" resultType="BookVO">
        SELECT
            b.*, -- book 테이블의 모든 컬럼
            a.au_name AS bo_author,
            (SELECT e.EP_COVER_IMG
            FROM episode e
            WHERE e.EP_BO_CODE = b.BO_CODE
            ORDER BY e.EP_DATE DESC
            LIMIT 1) AS bo_thumbnail
        FROM book b
        JOIN author a ON a.au_num = b.bo_au_num
        WHERE b.bo_au_num = #{au_num}
        ORDER BY
            substring((b.bo_total_rating / b.bo_review_count / 2.0), 1, 3) desc,
            b.bo_review_count desc
    </select>

    <select id="getNoticeList" resultType="NoticeVO">
        select * from notice
        where nt_bo_code = #{bo_code}
    </select>

    <select id="getScCodeByBoCode" resultType="String">
        select bo_sc_code from book
        where bo_code = #{bo_code}
    </select>

    <select id="getBestList" resultType="BookVO">
        select * from book
        where bo_sc_code = #{sc_code}
        order by substring((bo_total_rating / bo_review_count / 2.0), 1, 3) desc, bo_review_count desc
        limit 10
    </select>

    <select id="getBuyList" resultType="BuyListVO">
        select * from buy_list
        join episode on bl_ep_code = ep_code
        where bl_ur_num = #{ur_num} and ep_bo_code = #{bo_code}
    </select>

    <select id="getBList" resultType="BuyListVO">
        select * from buy_list
        join episode on bl_ep_code = ep_code
        where bl_ur_num = #{ur_num} and ep_bo_code = #{bo_code} and (bl_end_date is null or (bl_end_date is not null and bl_end_date <![CDATA[ > ]]> now()))
    </select>

    <select id="getBestList5" resultType="BookVO">
        select *, author.au_name AS bo_author from book
        join author on bo_au_num = au_num
        where bo_sc_code = #{sc_code}
        order by substring((bo_total_rating / bo_review_count / 2.0), 1, 3) desc, bo_review_count desc
        limit 5
    </select>

    <select id="getKeywordList" resultType="BookKeywordVO">
        select *, kw_name AS bk_name from book_keyword
        join keyword on bk_kw_code = kw_code
        where bk_bo_code = #{bo_code}
    </select>
    <select id="getBookCount" resultType="Integer">
        select count(*) from book
        join publisher_id on bo_pi_num = pi_num
        join publisher on pi_pu_code = pu_code
        where pu_code = #{pu_code}
    </select>
    <select id="getBookCount_BoFinIsN" resultType="Integer">
        select count(*) from book
        join publisher_id on bo_pi_num = pi_num
        join publisher on pi_pu_code = pu_code
        where pu_code = #{pu_code} and bo_fin = 'N'
    </select>
    <select id="getBookCount_BoFinIsY" resultType="Integer">
        select count(*) from book
        join publisher_id on bo_pi_num = pi_num
        join publisher on pi_pu_code = pu_code
        where pu_code = #{pu_code} and bo_fin = 'Y'
    </select>

    <update id="bookFinToY">
        update book set bo_fin = 'Y' where bo_code = #{bo_code}
    </update>
    <update id="bookFinToN">
        update book set bo_fin = 'N' where bo_code = #{bo_code}
    </update>

    <insert id="insertNotice">
        insert into notice(nt_title, nt_content, nt_pi_num, nt_bo_code)
        values(#{nt_title},#{nt_content},#{nt_pi_num},#{nt_bo_code})
    </insert>
    <select id="getNoticeCount" resultType="Integer">
        select count(*) from notice
        where nt_bo_code = #{bo_code}
    </select>
    <select id="selectNoticeList" resultType="NoticeVO">
        select * from notice
        join publisher_id on nt_pi_num = pi_num
        join user on pi_ur_num = ur_num
        WHERE nt_bo_code = #{bo_code}
        order by nt_date desc
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getCartEpCodesByUser" resultType="String">
        select ca_ep_code from cart
        where ca_ur_num = #{ur_num}
    </select>

    <insert id="addCart">
        insert into `cart`(ca_ep_code, ca_ur_num)
        value(#{ep_code}, #{ur_num})
    </insert>

    <select id="getPublishersBookList" resultType="BookVO">
        select book.*, au_name as bo_author, ur_nickname as bo_editor from book
        join publisher_id on BO_PI_NUM= PI_NUM
        join publisher on PI_PU_CODE = PU_CODE
        join author on bo_au_num = au_num
        join user on pi_ur_num = ur_num
        where PU_CODE = #{pu_code}
    </select>
    <update id="changeEditor">
        update book set bo_pi_num = #{pi_num} where bo_code = #{bo_code}
    </update>
    <select id="getEditorsBookListToPage" resultType="BookVO">
        select book.*, author.au_name as bo_author, publisher.pu_name as bo_publisher from book
        join author on bo_au_num = au_num
        join publisher_id on bo_pi_num = pi_num
        join publisher on pi_pu_code = pu_code
        where bo_pi_num = #{pi_num}
        order by bo_title asc
        LIMIT #{limit} OFFSET #{offset}
    </select>
    <select id="selectNotice" resultType="NoticeVO">
        select * from notice where nt_num = #{nt_num}
    </select>
    <update id="updateNotice">
        update notice set nt_title = #{nt_title}, nt_content = #{nt_content}
        where nt_num = #{nt_num}
    </update>
    <delete id="deleteNotice">
        delete from notice where nt_num = #{nt_num}
    </delete>
    <update id="updateTotalEpisode">
        update book set BO_TOTAL_EPISODE = BO_TOTAL_EPISODE + 1
        where bo_code = #{bo_code}
    </update>
</mapper>