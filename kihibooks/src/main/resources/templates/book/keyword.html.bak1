<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="~{layout/layout.html}">

<head>
  <meta charset="UTF-8">
  <title>키워드 검색</title>
    <style>
      .title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 24px;
      }
      .keyword-table { width: 100%; border-top: 1px solid #ccc; border-bottom: 1px solid #ccc; table-layout: fixed; }
      .keyword-table th { width: 120px; text-align: left; padding: 16px; background: #f7f7f7; font-weight: bold; }
      .keyword-scroll-wrapper { display: flex; align-items: center; }
      .keyword-scroll { display: flex; overflow-x: auto; gap: 8px; flex: 1; padding: 4px 0; scrollbar-width: none; }
      .keyword-scroll::-webkit-scrollbar { display: none; }
      .keyword-tag { background: #eee; border-radius: 16px; padding: 6px 12px; font-size: 14px; cursor: pointer; white-space: nowrap; }
      .keyword-tag.selected { background-color: #ff7f50; color: #fff; font-weight: bold; }
      .arrow-btn { width: 28px; height: 28px; background: white; border: 1px solid #ccc; border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; }
      .arrow-btn img { width: 14px; height: 14px; }
      .reset-btn { margin-top: 16px; font-size: 13px; color: #ff7f50; background: none; border: none; cursor: pointer; display: none; }
      .reset-btn.visible { display: inline-block; }
      .selected-keyword-list { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px; }
      .selected-keyword { background-color: #ffe3da; padding: 6px 12px; border-radius: 20px; font-size: 13px; display: flex; align-items: center; gap: 6px; }
      .selected-keyword .remove-btn { background: none; border: none; color: #888; font-size: 14px; cursor: pointer; }
      .book-list { margin-top: 40px; display: grid; gap: 24px; }
      .book-item { border: 1px solid #ccc; border-radius: 12px; padding: 20px; background: #fff; }
      .book-title { font-size: 18px; font-weight: bold; }
      .book-author, .book-desc, .book-meta, .book-tags, .book-date { margin-top: 6px; font-size: 14px; color: #333; }
      .keyword-list .keyword { background-color: #eee; padding: 4px 8px; margin-right: 6px; border-radius: 12px; font-size: 13px; }
      .no-result-msg { font-size: 18px; color: #999; text-align: center; padding: 40px 0; }
    </style>
</head>

<body>
<section class="container" layout:fragment="content">
  <h3 class="title">웹소설 키워드 검색</h3>

  <!-- 키워드 필터 테이블 -->
  <table class="keyword-table">
    <tbody>
      <tr th:each="category, stat : ${keywordCategories}">
        <th th:text="${category.kc_name}" class="category-name">카테고리</th>
        <td>
          <div class="keyword-scroll-wrapper">
            <button class="arrow-btn left" th:attr="data-target='kw-scroll-' + ${stat.index}" onclick="scrollKeywordRow(this, -1)">
              <img src="/resources/static/img/back.png" alt="이전">
            </button>
            <div class="keyword-scroll" th:attr="id='kw-scroll-' + ${stat.index}">
              <span th:each="keyword : ${category.keywordList}"
                    th:text="${keyword.kw_name}"
                    th:data-id="${keyword.kw_code}"
                    th:data-name="${keyword.kw_name}"
                    class="keyword-tag"
                    th:classappend="${selectedKeywordIds != null and selectedKeywordIds.contains(keyword.kw_code)} ? 'selected' : ''">
              </span>
            </div>
            <button class="arrow-btn right" th:attr="data-target='kw-scroll-' + ${stat.index}" onclick="scrollKeywordRow(this, 1)">
              <img src="/resources/static/img/next.png" alt="다음">
            </button>
          </div>
        </td>
      </tr>
    </tbody>
  </table>

  <!-- 선택된 키워드 표시 영역 -->
  <div id="selectedKeywordsContainer" class="selected-keywords" style="display:none;">
    <div id="selectedKeywords" class="selected-keyword-list"></div>
    <button id="resetBtn" class="reset-btn">전체 해제</button>
  </div>
  <!-- 결과 출력 영역 -->
  <div id="bookResultContainer">
    <div th:if="${#lists.isEmpty(bookList)}">
      <div class="no-result-box">
        <div class="no-result-msg">작품이 없습니다</div>
      </div>
    </div>
    <div class="book-list" th:unless="${#lists.isEmpty(bookList)}">
      <div th:each="book : ${bookList}" class="book-item">
        <h4 class="book-title" th:text="${book.bo_title}">제목</h4>
        <p class="book-author">작가: <span th:text="${book.bo_author}">작가명</span></p>
        <p class="book-desc" th:text="${book.bo_description}">설명</p>
        <p class="book-meta">
          <span>총 회차: <span th:text="${book.bo_total_episode}"></span></span>
          <span>평점: <span th:text="${book.bo_total_rating}"></span></span>
          <span>리뷰: <span th:text="${book.bo_review_count}"></span></span>
        </p>
        <p class="book-tags">
          <span th:text="${book.bo_adult} == true ? '성인' : '전체'"></span> |
          <span th:text="${book.bo_fin} == true ? '완결' : '연재중'"></span>
        </p>
        <p class="book-date">출판일: <span th:text="${#dates.format(book.bo_publish_date, 'yyyy-MM-dd')}"></span></p>
        <div class="keyword-list" th:if="${book.keywordList != null}">
          <span th:each="kw : ${book.keywordList}" class="keyword" th:text="${kw.kw_name}">키워드</span>
        </div>
      </div>
    </div>
  </div>
</section>

<div layout:fragment="script">
  <script>
    function toggleKeyword(el) {
      const id = el.dataset.id;
      const urlParams = new URLSearchParams(window.location.search);
      const sort = urlParams.get("sort") || "recent";

      let keywordIds = [];
      document.querySelectorAll(".keyword-tag.selected").forEach(span => {
        keywordIds.push(span.dataset.id);
      });

      if (el.classList.contains("selected")) {
        keywordIds = keywordIds.filter(kw => kw !== id);
      } else {
        if (!keywordIds.includes(id)) keywordIds.push(id);
      }

      updateKeywordResult(keywordIds, sort, 1);
    }

    function updateKeywordResult(keywordIds, sort, page) {
      const query = new URLSearchParams();
      keywordIds.forEach(id => query.append("keywordIds", id));
      query.set("sort", sort);
      query.set("page", page);

      $.ajax({
        url: "/book/keyword",
        method: "GET",
        data: query.toString(),
        success: function (html) {
          $("#bookResultContainer").html(html);
          history.replaceState(null, "", `/book/keyword?${query.toString()}`);
          requestAnimationFrame(() => {
            renderSelectedKeywords(keywordIds);
          });
        },
        error: function (xhr) {
          console.error("Ajax 오류", xhr.status, xhr.responseText);
          $("#bookResultContainer").html("<div style='padding:40px; text-align:center;'>오류가 발생했습니다.</div>");
        }
      });
    }

    function renderSelectedKeywords(keywordIds) {
      const container = document.getElementById("selectedKeywordsContainer");
      const list = document.getElementById("selectedKeywords");
      const resetBtn = document.getElementById("resetBtn");
      if (!container || !list || !resetBtn) return;

      list.innerHTML = "";
      document.querySelectorAll(".keyword-tag").forEach(span => {
        span.classList.remove("selected");
      });

      keywordIds.forEach(id => {
        const tag = document.querySelector(`.keyword-tag[data-id="${id}"]`);
        if (tag) tag.classList.add("selected");

        const name = tag?.dataset.name || tag?.textContent.trim() || "";
        const div = document.createElement("div");
        div.className = "selected-keyword";
        div.innerHTML = `${name} <button class="remove-btn" data-id="${id}">&times;</button>`;
        list.appendChild(div);
      });

      if (keywordIds.length === 0) {
        container.style.display = "none";
        resetBtn.classList.remove("visible");
      } else {
        container.style.display = "block";
        resetBtn.classList.add("visible");
      }
    }

    document.addEventListener("click", function (e) {
      if (e.target.classList.contains("remove-btn")) {
        const idToRemove = e.target.dataset.id;
        const urlParams = new URLSearchParams(window.location.search);
        const keywordIds = urlParams.getAll("keywordIds").filter(id => id !== idToRemove);
        const sort = urlParams.get("sort") || "recent";
        updateKeywordResult(keywordIds, sort, 1);
      }
    });

    function resetKeywords() {
      const sort = new URLSearchParams(window.location.search).get("sort") || "recent";
      updateKeywordResult([], sort, 1);
    }

    function scrollKeywordRow(btn, direction) {
      const targetId = btn.dataset.target;
      const scrollDiv = document.getElementById(targetId);
      if (!scrollDiv) return;
      const amount = 180 * direction;
      scrollDiv.scrollBy({ left: amount, behavior: 'smooth' });
    }

    window.addEventListener("DOMContentLoaded", () => {
      document.querySelectorAll(".keyword-scroll").forEach(div => {
        // 초기 화살표 상태 계산 생략 가능
      });
      const urlParams = new URLSearchParams(window.location.search);
      const keywordIds = urlParams.getAll("keywordIds");
      renderSelectedKeywords(keywordIds);
    });

    document.addEventListener("click", function (e) {
      if (e.target.classList.contains("keyword-tag")) {
        toggleKeyword(e.target);
      }
    });
  </script>
</div>
</body>
</html>